@page "/counter"


<PageTitle>Counter</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="ma-4 pa-4">
    <MudText Typo="Typo.h2" GutterBottom="true">Countdown Timer</MudText>

    <MudTextField @bind-Value="timer" T="int" Label="Set Timer (seconds)" Min="1" Adornment="Adornment.Start" AdornmentText="⏱️" />

    <MudButton @onclick="StartCountdownAsync" Class="mt-2 start-button">Start Countdown</MudButton>

    <MudText Typo="Typo.h3" Class="mt-4">Time Left: @timeLeft seconds</MudText>

    <MudProgressLinear Value="@(100 * (timer - timeLeft) / timer)" Class="progress-bar my-7" Style="height: 20px;">
        <MudText Typo="Typo.subtitle1" Color="Color.Dark">
            <b>@(100 * (timer - timeLeft) / timer) %</b>
        </MudText>
    </MudProgressLinear>
</MudContainer>

<style>
    .start-button {
        background: linear-gradient(135deg, #4caf50, #388e3c);
        color: white;
        font-weight: 600;
        padding: 12px 24px;
        border-radius: 50px;
        text-transform: uppercase;
        letter-spacing: 1px;
        border: none;
        transition: all 0.3s ease-in-out;
        box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
        cursor: pointer;
    }

        .start-button:hover {
            background: linear-gradient(135deg, #388e3c, #4caf50);
            transform: translateY(-4px);
            box-shadow: 0px 6px 16px rgba(0, 0, 0, 0.15);
        }

        .start-button:active {
            transform: translateY(2px);
            box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);
        }

    .progress-bar .mud-progress-linear-bar {
        background-color: #4caf50;
    }

    .progress-bar .mud-progress-linear-background {
        background-color: #e0e0e0;
    }

    .progress-bar .mud-progress-linear-bar .mud-text {
        color: #fff;
    }
</style>

@code {
    private int timer = 10;
    private int timeLeft = 0;

    private async Task StartCountdownAsync()
    {
        timeLeft = timer > 0 ? timer : 1;

        while (timeLeft > 0)
        {
            await Task.Delay(1000);
            --timeLeft;
            StateHasChanged();
        }

    }
}
